library(rgdal)
library(maptools)
poly <- readOGR(dsn = ".", layer = "N_Y_1") # Read shapefile
crs(poly)
poly
samp1 <- spTransform(samp1, crs(poly))
library(sp)
samp1 <- spTransform(samp1, crs(poly))
library(raster)
samp1 <- spTransform(samp1, crs(poly))
samp1
gDistance(samp1, samp1, byid=TRUE)
library(spatstat)
library(rgdal)
library(maptools)
gDistance(samp1, samp1, byid=TRUE)
library(rgeos)
gDistance(samp1, samp1, byid=TRUE)
gDistance(samp1, samp1, byid=TRUE)*1000
plot(samp1, add = TRUE)
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*1000
gDistance(samp1, samp1, byid=TRUE)*100000
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
plot(poly)
plot(samp1, add = TRUE)
# Add x and y coordinates as a dataframe
df <- data.frame(x = coordinates(samp1)[,1], y = coordinates(samp1)[,2])
samp1 <- SpatialPointsDataFrame(samp1, df)
proj.crs <- CRS(poly)
samp1 <- spTransform(samp1, crs(poly))
gDistance(samp1, samp1, byid=TRUE)*100000
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
gDistance(samp1, samp1, byid=TRUE)*100000
plot(poly)
plot(samp1, add = TRUE)
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
library(spatstat)
library(rgdal)
library(rgeos)
library(maptools)
library(raster)
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000 # Calculate distance between points
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
set.seed(42)
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000 # Calculate distance between points
set.seed(42)
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
set.seed(89)
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
set.seed(12)
samp1 <- spsample(poly, 3, type='random', cellsize = 200, iter=25)
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
gDistance(samp1, samp1, byid=TRUE)*100000
writeOGR(samp1, ".", "random_points", driver="ESRI Shapefile") # Save point shapefile
df <- data.frame(x = samp1[,1], y = samp1[,2])
df <- data.frame(x = samp1@coords[,1], y = samp1@coords[,2])
View(df)
samp1 <- SpatialPointsDataFrame(samp1, df) # Create SpatialPointsDataFrame
writeOGR(samp1, ".", "random_points", driver="ESRI Shapefile") # Save point shapefile
gDistance(samp1, samp1, byid=TRUE)*100000 # Calculate distance between points
dmat <- spDists(samp1)
View(dmat)
gDistance(samp1, samp1, byid=TRUE)*100000 # Calculate distance between points
spDists(samp1)*100000 # Calculate distance between points
spDists(samp1)*1000 # Calculate distance between points
min.dist <- 200
dmat[dmat <= min.dist] <- NA
samp1 <- spsample(poly, 200, type='random')
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
spDists(samp1)*1000 # Calculate distance between points
dmat <- spDists(samp1)
min.dist <- 200
dmat[dmat <= min.dist] <- NA
samples <- data.frame(ID=rownames(samp1@data), kNN=NA)
df <- data.frame(x = samp1@coords[,1], y = samp1@coords[,2]) # Extract coordinates
samp1 <- SpatialPointsDataFrame(samp1, df) # Create SpatialPointsDataFrame
samples <- data.frame(ID=rownames(samp1@data), kNN=NA)
for(i in 1:nrow(dmat) ) {
x <- as.vector( dmat[,i] )
names(x) <- samples$ID
x <- x[!is.na(x)]
if(!length(x) == 0) {
samples[i,][2] <- names(x)[sample(1:length(x), 1)]
} else {
samples[i,][2] <- NA
}
}
samp1@data <- data.frame(samp1@data, kNN=samp1$kNN)
samp1$kNN
t<- for(i in 1:nrow(dmat) ) {
x <- as.vector( dmat[,i] )
names(x) <- samples$ID
x <- x[!is.na(x)]
if(!length(x) == 0) {
samples[i,][2] <- names(x)[sample(1:length(x), 1)]
} else {
samples[i,][2] <- NA
}
}
dmat <- spDists(samp1)
min.dist <- 200
dmat[dmat <= min.dist] <- NA
samples <- data.frame(ID=rownames(samp1@data), kNN=NA)
for(i in 1:nrow(dmat) ) {
x <- as.vector( dmat[,i] )
names(x) <- samples$ID
x <- x[!is.na(x)]
if(!length(x) == 0) {
samples[i,][2] <- names(x)[sample(1:length(x), 1)]
} else {
samples[i,][2] <- NA
}
}
samp1@data <- data.frame(samp1@data, kNN=samp1$kNN)
for(i in 1:nrow(dmat) ) {
x <- as.vector( dmat[,i] )}
dmat[dmat <= min.dist]
View(samples)
for(i in 1:nrow(dmat) ) {
x <- as.vector( dmat[,i] )
names(x) <- samples$ID
x <- x[!is.na(x)]
if(!length(x) == 0) {
samples[i,][2] <- names(x)[sample(1:length(x), 1)]
} else {
samples[i,][2] <- NA
}
}
View(samples)
spDists(samp1)*1000 # Calculate distance between points
r <- spDists(samp1)*1000 # Calculate distance between points
d<-r[!(r => 200),]
r<- data.frame(spDists(samp1)*1000) # Calculate distance between points
d<-r[!(r => 200),]
d <- subset(r, !=0)
spDists(samp1)
r<- rSSI(0.2, 3, poly)
r<- rSSI(0.002, 3, poly)
plot(r, add = TRUE)
plot(poly)
plot(r, add = TRUE)
spDists(r)*1000 # Calculate distance between points
r$x
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
plot(d, add = TRUE)
spDists(d)*1000 # Calculate distance between points
r<- rSSI(0.02, 3, poly)
r<- rSSI(0.01, 3, poly)
r<- rSSI(0.025, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
r<- rSSI(0.025, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
r<- rSSI(0.0025, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
r<- rSSI(0.0025, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
r<- rSSI(0.0025, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
r<- rSSI(0.003, 3, poly)
r<- rSSI(0.003, 3, poly)
r<- rSSI(0.0029, 3, poly)
r<- rSSI(0.0027, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
r <- rSSI(0.002, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
r <- rSSI(0.0025, 3, poly)
d <- cbind(r$x, r$y)
d <- SpatialPoints(d, crs(poly))
spDists(d)*1000 # Calculate distance between points
samp1 <- rSSI(0.0025, 3, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- SpatialPoints(samp1, crs(poly))
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
spDists(samp1)*1000 # Calculate distance between points
samp1 <- rSSI(0.0025, 3, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- SpatialPoints(samp1, crs(poly))
samp1 <- spTransform(samp1, crs(poly)) # Reproject to match polygon
plot(poly)
plot(samp1, add = TRUE)
spDists(samp1)*1000 # Calculate distance between points
poly <- readOGR(dsn = ".", layer = "N_Y_1") # Read shapefile
Rpoints <- function(d = 0.0025, p){
samp1 <- rSSI(d, 3, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- SpatialPoints(samp1, crs(p))
y <- spTransform(samp1, crs(poly))
}
f <- Rpoints(p = poly)
plot(f)
Rpoints <- function(d = 0.0025, p){
samp1 <- rSSI(d, 3, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- SpatialPoints(samp1, crs(p))
y <- spTransform(samp1, crs(poly))
x <- spDists(samp1)*1000
}
f <- Rpoints(p = poly)
Rpoints <- function(d = 0.0025, p){
samp1 <- rSSI(d, 3, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- SpatialPoints(samp1, crs(p))
y <- spTransform(samp1, crs(poly))
x <- spDists(samp1)*1000
y <- SpatialPointsDataFrame(y,x)
}
f <- Rpoints(p = poly)
Rpoints <- function(d = 0.0025, p){
samp1 <- rSSI(d, 3, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- SpatialPoints(samp1, crs(p))
y <- spTransform(samp1, crs(poly))
x <- data.frame(spDists(samp1)*1000)
y <- SpatialPointsDataFrame(y,x)
}
f <- Rpoints(p = poly)
# Function to generate random points within a polygon buffered by a minimum distance
# Attaches a dataframe of distances-between-points
# p = polygon
# d = inherited distance (distance between points)
#
# E.g.
# spat <- Rpoints(p = poly1)
#
# To explore dataframe, use spat@data
Rpoints <- function(d = 0.0025, p){
samp1 <- rSSI(d, 3, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- SpatialPoints(samp1, crs(p))
y <- spTransform(samp1, crs(poly))
t <- data.frame(spDists(samp1)*1000)
t$x <- samp1@coords[,1]
t$y = samp1@coords[,2]
y <- SpatialPointsDataFrame(y,t)
}
f <- Rpoints (p = poly)
f@data
samp1 <- SpatialPoints(cbind(samp1$x, samp1$y), crs(poly)) # Transform to SpatialPoints shapefile
samp1 <- rSSI(0.0025, 3, poly) # Generate random points
samp1 <- SpatialPoints(cbind(samp1$x, samp1$y), crs(poly)) # Transform to SpatialPoints shapefile
head(f@data)
min<-apply(f,2,function (v) min(which(v>0), na.rm = TRUE))
min<-apply(f@data,2,function (v) min(which(v>0), na.rm = TRUE))
the_min <- apply(f@data, 1, min)
t<- spDists(samp1)*1000 # Calculate distance between points
t<- data.frame(spDists(samp1)*1000) # Calculate distance between points
the_min <- apply(t, 1, min)
t2[t == 0] <- NA
t2<-t
t2[t2 == 0] <- NA
the_min <- apply(t2, 1, min)
t2[t2 == 0] <- 1000
the_min <- apply(t2, 1, min)
t2<-t
t2[t2 == 0] <- 1000
the_min <- apply(t2, 1, min)
r <- apply(t2, 1, function (v) min(which(v>0))
r <- apply(t2, 1, function (v) min(which(v>0))
)
r <- apply(t2, 1, function (v) min(which(v>0)))
t2<-t
r <- apply(t2, 1, function (v) min(which(v>0)))
r <- apply(t2, 1, function (v) min(v[v > 0]))
samp1 <- rSSI(0.025, 20, poly)
samp1 <- rSSI(0.0025, 3, poly)
samp1 <- SpatialPoints(cbind(samp1$x, samp1$y), crs(p))
samp1 <- SpatialPoints(cbind(samp1$x, samp1$y), crs(poly))
samp1
poly
t <- data.frame(spDists(samp1)*1000)
y <- SpatialPoints(cbind(s$x, samp1$y), crs(poly))
y <- SpatialPoints(cbind(samp1$x, samp1$y), crs(poly))
s <- rSSI(0.0025, 3, poly)
y <- SpatialPoints(cbind(s$x, s$y), crs(poly))
t <- data.frame(spDists(y)*1000)
r <- apply(t, 1, function (v) min(v[v > 0]))
d <- data.frame(dist = apply(t, 1, function (v) min(v[v > 0])),
x = y@coords[,1],
y = y@coords[,2])
View(d)
o <- SpatialPointsDataFrame(y,d)
file <- "Untitled Polygon.kmz"
SST_start = readOGR(file)
file <- "Untitled Polygon.kml"
SST_start = readOGR(file)
plot(SST_start)
x <- SST_start@coords[,1]
extractCoords <- function(sp.df)
{
results <- list()
for(i in 1:length(sp.df@polygons[[1]]@Polygons))
{
results[[i]] <- sp.df@polygons[[1]]@Polygons[[i]]@coords
}
results <- Reduce(rbind, results)
results
}
p <- extractCoords(SST_start)
# Stack user forlooper https://stackoverflow.com/a/37332382
extractCoords <- function(sp.df)
{
results <- list()
for(i in 1:length(sp.df@polygons[[1]]@Polygons))
{
results[[i]] <- sp.df@polygons[[1]]@Polygons[[i]]@coords
}
results <- data.frame(Reduce(rbind, results))
results
}
p <- extractCoords(SST_start)
View(p)
P1 = Polygon(p)
plot(P1)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(Ps1)
x <- p[,1]
y <- p[,2]
x
y
x <- c(-3.541238, -3.547341, -3.561397, -3.572132, -3.572495, -3.551687, -3.566528, -3.599789, -3.592162,
-3.604156, -3.629145, -3.618190, -3.585571, -3.572779, -3.525398, -3.504483, -3.525454, -3.541238)
y <- c(51.68106, 51.69050, 51.7003, 51.69617, 51.68800, 51.67405, 51.64949, 51.65832, 51.67560,
51.68177, 51.71373, 51.72463, 51.73346, 51.73788, 51.71745, 51.69461, 51.67548, 51.68106)
xy <- cbind(x,y)
P1 = Polygon(xy)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(Ps1)
samp1 <- rSSI(0.0025, 3, poly) # Generate random points
plot(samp1)
x <- c(-3.541238, -3.547341, -3.561397, -3.572132, -3.572495, -3.551687, -3.566528, -3.599789, -3.592162,
-3.604156, -3.629145, -3.618190, -3.585571, -3.572779, -3.525398, -3.504483, -3.525454, -3.541238)
y <- c(51.68106, 51.69050, 51.7003, 51.69617, 51.68800, 51.67405, 51.64949, 51.65832, 51.67560,
51.68177, 51.71373, 51.72463, 51.73346, 51.73788, 51.71745, 51.69461, 51.67548, 51.68106)
p1 <- Polygon(xy)
poly <- SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
samp1 <- rSSI(0.0025, 3, poly) # Generate random points
plot(samp1)
samp1 <- rSSI(0.0025, 10, poly) # Generate random points
plot(samp1)
spDists(samp1)*1000 # Calculate distance between points
samp1 <- cbind(samp1$x, samp1$y) # Extract coordinates
samp1 <- SpatialPoints(samp1, crs(poly)) # Transform to SpatialPoints shapefile
spDists(samp1)*1000 # Calculate distance between points
plot(samp1)
head(spDists(samp1)*1000)
plot(samp1)
x <- c(-3.541238, -3.547341, -3.561397, -3.572132, -3.572495, -3.551687, -3.566528, -3.599789, -3.592162,
-3.604156, -3.629145, -3.618190, -3.585571, -3.572779, -3.525398, -3.504483, -3.525454, -3.541238)
y <- c(51.68106, 51.69050, 51.7003, 51.69617, 51.68800, 51.67405, 51.64949, 51.65832, 51.67560,
51.68177, 51.71373, 51.72463, 51.73346, 51.73788, 51.71745, 51.69461, 51.67548, 51.68106)
p1 <- Polygon(xy)
xy <- cbind(x,y)
p1 <- Polygon(xy)
poly <- SpatialPolygons(p1, proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
poly <- SpatialPolygons(xy, proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
poly <- SpatialPolygons(list(Polygons(list(p1), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
poly <- SpatialPolygons(list(Polygons(list(p1)), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
poly <- SpatialPolygons(list(Polygons(list(p1)), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")))
samp1 <- rSSI(0.0025, 10, poly)
samp1 <- cbind(samp1$x, samp1$y) # Extract coordinates
samp1 <- SpatialPoints(samp1, crs(poly)) # Transform to SpatialPoints shapefile
setwd("C:/Users/Anthony Caravaggi/Dropbox/GitHub/browncoat")
rmarkdown::render(Rpoints.Rmd)
rmarkdown::render("Rpoints.Rmd")
install.packages("ggmap")
bbx <- c(left=-3.664351,bottom=51.631480,right=-3.467390,top=51.747602)
library(ggmap)
myMap2 <- get_googlemap(center = c(lon=mean(bbx[c(1,3)]), lat=mean(bbx[c(2,4)])),
zoom =11, maptype = "satellite")
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5)
myMap2 <- get_googlemap(center = c(lon=mean(bbx[c(1,3)]), lat=mean(bbx[c(2,4)])),
zoom =8, maptype = "satellite")
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5)
myMap2 <- get_googlemap(center = c(lon=mean(bbx[c(1,3)]), lat=mean(bbx[c(2,4)])),
zoom =14, maptype = "satellite")
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5)
myMap2 <- get_googlemap(center = c(lon=mean(bbx[c(1,3)]), lat=mean(bbx[c(2,4)])),
zoom =12, maptype = "satellite")
myMap2 <- get_googlemap(center = c(lon=mean(bbx[c(1,3)]), lat=mean(bbx[c(2,4)])),
zoom =12, maptype = "satellite")
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5)
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = x, y = y), data = samp1)
samp1@coords[,1]
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = samp1@coords[,1], y = samp1@coords[,2]), data = samp1)
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +   geom_point(aes(x = samp1@coords[,1], y = samp1@coords[,2]), data = samp1)
df <- data.frame(x = samp1@coords[,1], y = samp1@coords[,2])
samp1 <- SpatialPointsDataFrame(samp1, df)
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = samp1@coords[,1], y = samp1@coords[,2]), data = samp1)
ggmap(myMap2) +
geom_point(aes(x = samp1@coords[,1], y = samp1@coords[,2]), data = samp1)
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = xy[,1], y = xy[,2]), data = xy, col="orange")
xy <- as.data.frame(xy)
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = xy[,1], y = xy[,2]), data = xy, col="orange")
samp1 <- rSSI(0.0025, 10, poly)
samp1 <- cbind(samp1$x, samp1$y)
samp1 <- as.data.frame(samp1)
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = samp1[,1], y = samp1[,2]), col="orange")
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = samp1[,1], y = samp1[,2]), data = samp1, col="orange")
samp1 <- SpatialPoints(samp1, crs(poly))
sDat <- samp1@data
sDat <- samp1@coords
sDat <- data.frame(samp1@coords)
ggmap(myMap2) + geom_polygon(aes(x=x, y=y), data=poly, fill="red", alpha=.5) +
geom_point(aes(x = sDat[,1], y = sDat[,2]), data = sDat, col="orange")
rmarkdown::render(Rpoints.Rmd)
rmarkdown::render(Rpoints.Rmd)
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
Rpoints <- function(d = 0.0025, n = 10, p){
s <- rSSI(d, n, poly)
y <- SpatialPoints(cbind(s$x, s$y), crs(p))
t <- data.frame(spDists(y)*1000)
d <- data.frame(dist = apply(t, 1, function (v) min(v[v > 0])), # Collapse distances to non-zero minimum
x = y@coords[,1],
y = y@coords[,2])
o <- SpatialPointsDataFrame(y,d)
}
spat <- Rpoints(d = 0.04, n = 30, p = poly)
spat <- Rpoints(d = 0.04, n = 15, p = poly)
spat <- Rpoints(d = 0.03, n = 15, p = poly)
plot(poly)
spat <- Rpoints(d = 0.001, n = 15, p = poly)
spat <- Rpoints(d = 0.001, n = 30, p = poly)
spat <- Rpoints(d = 0.09, n = 30, p = poly)
spat <- Rpoints(d = 0.001, n = 30, p = poly)
head(spat@data)
spat@data
head(spat@data)
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
rmarkdown::render("Rpoints.Rmd")
